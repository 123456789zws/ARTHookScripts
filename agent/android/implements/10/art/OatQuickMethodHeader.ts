import { JSHandle } from "../../../JSHandle"

// jetbrains://clion/navigate/reference?project=libart&path=oat_quick_method_header.h

// private:
// static constexpr uint32_t kShouldDeoptimizeMask = 0x80000000;
const kShouldDeoptimizeMask: number = 0x80000000
// static constexpr uint32_t kCodeSizeMask = ~kShouldDeoptimizeMask;
const kCodeSizeMask: number = ~kShouldDeoptimizeMask

// <reference path="jetbrains://clion/navigate/reference?project=libart&path=oat_quick_method_header.h" />
//   // The offset in bytes from the start of the vmap table to the end of the header.
//   uint32_t vmap_table_offset_ = 0u;
//   // The code size in bytes. The highest bit is used to signify if the compiled
//   // code with the method header has should_deoptimize flag.
//   uint32_t code_size_ = 0u;
//   // The actual code.
//   uint8_t code_[0];
// OatQuickMethodHeader precedes the raw code chunk generated by the compiler.
// class PACKED(4) OatQuickMethodHeader {}
export class OatQuickMethodHeader extends JSHandle {

    // // The offset in bytes from the start of the vmap table to the end of the header.
    // uint32_t vmap_table_offset_ = 0u;
    vmap_table_offset_ = this.handle.add(0)
    // // The code size in bytes. The highest bit is used to signify if the compiled
    // // code with the method header has should_deoptimize flag.
    // uint32_t code_size_ = 0u;
    code_size_ = this.handle.add(4)
    // // The actual code.
    // uint8_t code_[0];
    code_ = this.handle.add(8)

    constructor(handle: NativePointer) {
        super(handle)
    }

    toString(): string {
        return `${this.handle} -> vmap_table_offset: ${this.vmap_table_offset} code_size: ${this.code_size} code: ${this.code}`
    }

    get vmap_table_offset(): number {
        return this.vmap_table_offset_.readU32()
    }

    get code_size(): number {
        return this.code_size_.readU32()
    }

    get code(): NativePointer {
        return this.code_.readPointer()
    }

    // const uint8_t* GetOptimizedCodeInfoPtr()
    GetOptimizedCodeInfoPtr(): NativePointer {
        return this.code.sub(this.vmap_table_offset_)
    }

    // uint32_t GetCodeSize()
    GetCodeSize(): number {
        return ptr(this.code_size).and(kCodeSizeMask).toUInt32()
    }

    // const uint32_t* GetCodeSizeAddr()
    GetCodeSizeAddr(): NativePointer {
        return this.code_size_
    }

    //  bool IsOptimized() const {
    //     return GetCodeSize() != 0 && vmap_table_offset_ != 0;
    // }
    IsOptimized(): boolean {
        return this.GetCodeSize() != 0 && this.vmap_table_offset != 0
    }

}